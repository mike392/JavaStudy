package com.study.market.entity;

import java.util.Comparator;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.locks.ReentrantLock;

public abstract class Market {
	protected Set<Share> shares = new CopyOnWriteArraySet<Share>();
	private ConcurrentSkipListSet<Share> sortedShares;
	protected static ReentrantLock lock = new ReentrantLock();
	public SortedSet<Share> getShares() {
		sortedShares = new ConcurrentSkipListSet<Share>(Comparator.comparing(Share::getPrice));
		sortedShares.addAll(shares);
		return sortedShares;
	}

	public void setShares(Set<Share> shares) {
		this.shares = shares;
	}

}
